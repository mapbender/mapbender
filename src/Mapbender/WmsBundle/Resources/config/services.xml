<?xml version="1.0" ?>
<container xmlns="http://symfony.com/schema/dic/services"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd">
    <parameters>
        <parameter key="mapbender.source.wms.config_generator.class">Mapbender\WmsBundle\Component\Presenter\WmsSourceInstanceConfigGenerator</parameter>
        <parameter key="mapbender.source.wms.class">Mapbender\WmsBundle\WmsDataSource</parameter>
        <parameter key="mapbender.source.wms.instance_factory.class">Mapbender\WmsBundle\Component\Wms\SourceInstanceFactory</parameter>
        <parameter key="mapbender.importer.source.wms.service.class">Mapbender\WmsBundle\Component\Wms\Importer</parameter>
        <parameter key="wmsloader.example_url">https://wms.wheregroup.com/cgi-bin/mapbender_user.xml?VERSION=1.3.0&amp;REQUEST=GetCapabilities&amp;SERVICE=WMS</parameter>
        <!-- set this to true in your parameters.yaml to enable layer order control in "Layersets" backend -->
        <parameter key="mapbender.preview.layer_order.wms">true</parameter>
        <!-- null for built-in source service default -->
        <parameter key="wms.default_layer_order">null</parameter>

        <parameter key="mapbender.imageexport.renderer.wms.class">Mapbender\WmsBundle\Component\LayerRendererWms</parameter>
        <!-- Maximum for both WIDTH or HEIGHT params on any GetMap request started by image export + print (pixel units).
             If the output requires more pixels, WMS will be requested in tiles to stay below this maximum. -->
        <parameter key="mapbender.imaageexport.renderer.wms.max_getmap_size">8192</parameter>
        <parameter key="mapbender.imaageexport.renderer.wms.max_getmap_size.x">%mapbender.imaageexport.renderer.wms.max_getmap_size%</parameter>
        <parameter key="mapbender.imaageexport.renderer.wms.max_getmap_size.y">%mapbender.imaageexport.renderer.wms.max_getmap_size%</parameter>
    </parameters>
    <services>
        <service id="mapbender.source.wms" class="%mapbender.source.wms.class%">
            <tag name="mapbender.datasource" />
            <argument type="service" id="mapbender.source.wms.config_generator" />
            <argument type="service" id="mapbender.source.wms.instance_factory" />
            <argument type="service" id="mapbender.importer.source.wms.service" />
            <argument type="service" id="mapbender.imageexport.renderer.wms" />
        </service>
        <service id="mapbender.importer.source.wms.service" class="%mapbender.importer.source.wms.service.class%" public="true">
            <argument type="service" id="mapbender.http_transport.service" />
            <argument type="service" id="doctrine.orm.default_entity_manager" />
            <argument type="service" id="mapbender.xmlvalidator.service" />
        </service>
        <service id="mapbender.source.wms.config_generator" class="%mapbender.source.wms.config_generator.class%">
            <argument type="service" id="mapbender.source.url_processor.service" />
            <argument type="service" id="security.token_storage" />
            <argument>%wms.default_layer_order%</argument>
        </service>
        <service id="mapbender.source.wms.instance_factory" class="%mapbender.source.wms.instance_factory.class%">
            <argument type="service" id="doctrine.orm.default_entity_manager" />
            <argument>%wms.default_layer_order%</argument>
        </service>
        <!-- servicy form type for wms instances; required to inject other services / params -->
        <service id="mapbender.sourceinstance.wms.form" class="Mapbender\WmsBundle\Form\Type\WmsInstanceInstanceLayersType">
            <argument>%mapbender.preview.layer_order.wms%</argument>
            <tag name="form.type" />
        </service>
        <service id="mapbender.init_db_handler.prune_invalid_wms_sources" class="Mapbender\WmsBundle\EventHandler\InitDb\PruneInvalidWmsSourcesHandler">
            <argument type="service" id="doctrine.orm.default_entity_manager" />
            <tag name="kernel.event_subscriber" />
        </service>
        <service id="mapbender.imageexport.renderer.wms" class="%mapbender.imageexport.renderer.wms.class%">
            <argument type="service" id="mapbender.imageexport.image_transport.service" />
            <argument type="service" id="logger" />
            <argument type="collection">
                <argument>%mapbender.imaageexport.renderer.wms.max_getmap_size.x%</argument>
                <argument>%mapbender.imaageexport.renderer.wms.max_getmap_size.y%</argument>
            </argument>
            <argument type="collection">
                <argument>%mapbender.imaageexport.renderer.wms.tile_buffer.x%</argument>
                <argument>%mapbender.imaageexport.renderer.wms.tile_buffer.y%</argument>
            </argument>
        </service>
    </services>
</container>
